import 'package:circular_countdown_timer/circular_countdown_timer.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:quran_app/core/assets/app_images.dart';
import 'package:quran_app/core/custom_widgets/prayer_time_item.dart';
import 'package:quran_app/core/models/prayer_time_model.dart';
import 'package:quran_app/core/utils/myConstants.dart';
import 'package:quran_app/manager/cubit/prayer_time_cubit.dart';
import 'package:quran_app/manager/state/prayer_time_state.dart';

class PrayerTimesScreen extends StatefulWidget {
  const PrayerTimesScreen({super.key});
  static const String routeName = "home";

  @override
  State<PrayerTimesScreen> createState() => _PrayerTimesScreenState();
}

class _PrayerTimesScreenState extends State<PrayerTimesScreen> {
  String nextPrayerTimeName = '';
  final CountDownController _controller = CountDownController();
  Duration countdownDuration = Duration.zero;

  @override
  Widget build(BuildContext context) {
    double screenHeight = ScreenUtils.getScreenHeight(context);
    double screenWidth = ScreenUtils.getScreenWidth(context);
    return SafeArea(
      child: Scaffold(
        body: Container(
          decoration: BoxDecoration(
            image: DecorationImage(
              image: AssetImage(AppImages.backgroundLight),
              fit: BoxFit.cover,
            ),
          ),
          child: BlocBuilder<PrayerTimeCubit, AppState>(
            builder: (context, state) {
              if (state is SuccessState) {
                // نحسب اسم ووقت الصلاة الجاية
                final result = getNextPrayerDurationAndName(
                  state.times['timings'],
                );
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  if (mounted) {
                    setState(() {
                      nextPrayerTimeName = result['name'];
                      countdownDuration = result['duration'];
                    });
                    _controller.restart(duration: countdownDuration.inSeconds);
                  }
                });
                return ListView(
                  children: [
                    SizedBox(height: screenHeight * 0.1),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Column(
                          children: [
                            Text(
                              '${state.times['date']['hijri']['month']['ar']}',
                              style: const TextStyle(fontSize: 25),
                            ),
                            Text(
                              '${state.times['date']['hijri']['date']}',
                              style: const TextStyle(
                                fontSize: 25,
                                color: Colors.orange,
                              ),
                            ),
                            const SizedBox(height: 10),
                            Text(
                              'الصلاة القادمة: $nextPrayerTimeName',
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Colors.orange,
                              ),
                            ),
                          ],
                        ),
                        Column(
                          children: [
                            CircularCountDownTimer(
                              controller: _controller,
                              width: screenWidth * 0.40,
                              height: screenHeight * 0.33,
                              duration: countdownDuration.inSeconds,
                              ringColor: Colors.white,
                              fillColor: const Color(0xFFb7935f),
                              textStyle: const TextStyle(
                                fontSize: 28.0,
                                color: Colors.black,
                                fontWeight: FontWeight.bold,
                              ),
                              textFormat: CountdownTextFormat.HH_MM_SS,
                              strokeWidth: 8.0,
                              strokeCap: StrokeCap.round,
                              isReverse: false,
                              isReverseAnimation: false,
                              isTimerTextShown: true,
                            ),
                          ],
                        ),
                      ],
                    ),
                    SizedBox(height: screenHeight * 0.04),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          PrayerTimeItem(
                            prayerTimeModel: PrayerTimeModel(
                              imageName: AppImages.fogImage,
                              prayerName: 'الفجر',
                              prayerTime: '${state.times['timings']['Fajr']}',
                            ),
                          ),
                          PrayerTimeItem(
                            prayerTimeModel: PrayerTimeModel(
                              imageName: AppImages.sunsetImage,
                              prayerName: 'الشروق',
                              prayerTime:
                                  '${state.times['timings']['Sunrise']}',
                            ),
                          ),
                          PrayerTimeItem(
                            prayerTimeModel: PrayerTimeModel(
                              imageName: AppImages.sunImage,
                              prayerName: 'الظهر',
                              prayerTime: '${state.times['timings']['Dhuhr']}',
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 8),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          PrayerTimeItem(
                            prayerTimeModel: PrayerTimeModel(
                              imageName: AppImages.cloudImage,
                              prayerName: 'العصر',
                              prayerTime: '${state.times['timings']['Sunset']}',
                            ),
                          ),
                          PrayerTimeItem(
                            prayerTimeModel: PrayerTimeModel(
                              imageName: AppImages.sunriseImage,
                              prayerName: 'المغرب',
                              prayerTime:
                                  '${state.times['timings']['Maghrib']}',
                            ),
                          ),
                          PrayerTimeItem(
                            prayerTimeModel: PrayerTimeModel(
                              imageName: AppImages.moonImage,
                              prayerName: 'العشاء',
                              prayerTime: '${state.times['timings']['Isha']}',
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                );
              } else if (state is ErrorState) {
                return Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  spacing: 20,
                  children: [
                    Center(child: Text('Error -> ${state.errorMessage}')),
                  ],
                );
              } else {
                return const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    spacing: 20,
                    children: [
                      CircularProgressIndicator(),
                      Text('Loading Prayer Times...'),
                    ],
                  ),
                );
              }
            },
          ),
        ),
      ),
    );
  }

  Map<String, dynamic> getNextPrayerDurationAndName(
    Map<String, dynamic> timings,
  ) {
    DateTime now = DateTime.now();
    List<Map<String, String>> prayers = [
      {'name': 'الفجر', 'key': 'Fajr'},
      {'name': 'الظهر', 'key': 'Dhuhr'},
      {'name': 'العصر', 'key': 'Asr'},
      {'name': 'المغرب', 'key': 'Maghrib'},
      {'name': 'العشاء', 'key': 'Isha'},
    ];

    for (var prayer in prayers) {
      String clean = _cleanTime(timings[prayer['key']]);
      List<String> parts = clean.split(':');
      int hour = int.parse(parts[0]);
      int minute = int.parse(parts[1]);

      DateTime prayerTime = DateTime(
        now.year,
        now.month,
        now.day,
        hour,
        minute,
      );

      if (prayerTime.isAfter(now)) {
        return {
          'name': prayer['name']!,
          'duration': prayerTime.difference(now),
        };
      }
    }

    // صلاة الفجر لبكرا
    String fajr = _cleanTime(timings['Fajr']);
    List<String> parts = fajr.split(':');
    int hour = int.parse(parts[0]);
    int minute = int.parse(parts[1]);

    DateTime tomorrowFajr = DateTime(
      now.year,
      now.month,
      now.day + 1,
      hour,
      minute,
    );

    return {'name': 'الفجر', 'duration': tomorrowFajr.difference(now)};
  }

  String _cleanTime(String time) {
    return time.split(' ').first;
  }
}
