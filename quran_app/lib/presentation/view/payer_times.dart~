import 'package:circular_countdown_timer/circular_countdown_timer.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:quran_app/core/assets/app_images.dart';
import 'package:quran_app/core/custom_widgets/prayer_time_item.dart';
import 'package:quran_app/core/extensions/extension.dart';
import 'package:quran_app/core/models/prayer_time_model.dart';
import 'package:quran_app/core/utils/myConstants.dart';
import 'package:quran_app/manager/cubit/prayer_time_cubit.dart';
import 'package:quran_app/manager/state/prayer_time_state.dart';

class PrayerTimesScreen extends StatefulWidget {
  const PrayerTimesScreen({super.key});
  static const String routeName = "home";

  @override
  State<PrayerTimesScreen> createState() => _PrayerTimesScreenState();
}

class _PrayerTimesScreenState extends State<PrayerTimesScreen> {
  String nextPrayerTimeName = '';
  @override
  Widget build(BuildContext context) {
    double screenHeight = ScreenUtils.getScreenHeight(context);
    double screenWidth = ScreenUtils.getScreenWidth(context);
    return SafeArea(
      child: Scaffold(
        body: BlocBuilder<PrayerTimeCubit, AppState>(
          builder: (context, state) {
            if (state is SuccessState) {
              Duration countdownDuration = getNextPrayerDuration(
                state.times['timings'],
              );
              return ListView(
                children: [
                  SizedBox(height: screenHeight * 0.1),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      Column(
                        children: [
                          Text(
                            '${state.times['date']['hijri']['month']['ar']}',
                            style: const TextStyle(fontSize: 25),
                          ),
                          Text(
                            '${state.times['date']['hijri']['date']}',
                            style: const TextStyle(
                              fontSize: 25,
                              color: Colors.orange,
                            ),
                          ),
                        ],
                      ),
                      //Use CountdownTimer
                      Column(
                        children: [
                          CircularCountDownTimer(
                            width: screenWidth * 0.40,
                            height: screenHeight * 0.33,
                            duration:
                                countdownDuration
                                    .inSeconds, // Convert to seconds
                            ringColor: Colors.white,
                            fillColor: const Color(0xFFb7935f),
                            textStyle: const TextStyle(
                              fontSize: 28.0,
                              color: Colors.black,
                              fontWeight: FontWeight.bold,
                            ),
                            textFormat: CountdownTextFormat.HH_MM_SS,
                            strokeWidth: 8.0,
                            strokeCap: StrokeCap.round,
                            isReverse: false,
                            isReverseAnimation: false,
                            isTimerTextShown: true,
                          ),
                        ],
                      ),
                    ],
                  ),
                  SizedBox(height: screenHeight * 0.04),
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        PrayerTimeItem(
                          prayerTimeModel: PrayerTimeModel(
                            imageName: AppImages.fogImage,
                            prayerName: context.alFajr,
                            prayerTime: '${state.times['timings']['Fajr']}',
                          ),
                        ),
                        PrayerTimeItem(
                          prayerTimeModel: PrayerTimeModel(
                            imageName: AppImages.sunsetImage,
                            prayerName: context.alShorouq,
                            prayerTime: '${state.times['timings']['Sunrise']}',
                          ),
                        ),
                        PrayerTimeItem(
                          prayerTimeModel: PrayerTimeModel(
                            imageName: AppImages.sunImage,
                            prayerName: context.alDhuhr,
                            prayerTime: '${state.times['timings']['Dhuhr']}',
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 8),
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        PrayerTimeItem(
                          prayerTimeModel: PrayerTimeModel(
                            imageName: AppImages.cloudImage,
                            prayerName: context.alAsr,
                            prayerTime: '${state.times['timings']['Sunset']}',
                          ),
                        ),
                        PrayerTimeItem(
                          prayerTimeModel: PrayerTimeModel(
                            imageName: AppImages.sunriseImage,
                            prayerName: context.alMaghrib,
                            prayerTime: '${state.times['timings']['Maghrib']}',
                          ),
                        ),
                        PrayerTimeItem(
                          prayerTimeModel: PrayerTimeModel(
                            imageName: AppImages.moonImage,
                            prayerName: context.alIsha,
                            prayerTime: '${state.times['timings']['Isha']}',
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              );
            } else if (state is ErrorState) {
              return Column(
                mainAxisAlignment: MainAxisAlignment.center,
                spacing: 20,
                children: [
                  Center(
                    child: Text('${context.error} -> ${state.errorMessage}'),
                  ),
                ],
              );
            } else {
              return Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  spacing: 20,
                  children: [
                    CircularProgressIndicator(),
                    Text(context.loading),
                  ],
                ),
              );
            }
          },
        ),
      ),
    );
  }

  Duration getNextPrayerDuration(Map<String, dynamic> timings) {
    DateTime now = DateTime.now();
    List<Map<String, String>> prayers = [
      {'name': 'الفجر', 'key': 'Fajr'},
      {'name': 'الظهر', 'key': 'Dhuhr'},
      {'name': 'العصر', 'key': 'Asr'},
      {'name': 'المغرب', 'key': 'Maghrib'},
      {'name': 'العشاء', 'key': 'Isha'},
    ];

    for (var prayer in prayers) {
      String clean = _cleanTime(timings[prayer['key']]);
      List<String> parts = clean.split(':');
      int hour = int.parse(parts[0]);
      int minute = int.parse(parts[1]);

      DateTime prayerTime = DateTime(
        now.year,
        now.month,
        now.day,
        hour,
        minute,
      );

      if (prayerTime.isAfter(now)) {
        nextPrayerTimeName = prayer['name']!;
        return prayerTime.difference(now);
      }
    }

    // لو مفيش صلاة جاية النهارده نحسب الفجر بتاع بكرة
    String fajr = _cleanTime(timings['Fajr']);
    List<String> parts = fajr.split(':');
    int hour = int.parse(parts[0]);
    int minute = int.parse(parts[1]);

    DateTime tomorrowFajr = DateTime(
      now.year,
      now.month,
      now.day + 1,
      hour,
      minute,
    );

    nextPrayerTimeName = 'الفجر';
    return tomorrowFajr.difference(now);
  }

  String _cleanTime(String time) {
    return time.split(' ').first;
  }
}
